let g:deoplete#enable_at_startup      = 1
let g:acp_enableAtStartup             = 0
let g:neocomplcache_enable_at_startup = 0
let g:neocomplete#enable_at_startup   = 0

call deoplete#custom#option('keyword_patterns', {
  \ '_': '[a-zA-Z_]\k*',
  \ 'ruby': '[a-zA-Z_]\w*[!?]?',
  \ })

call deoplete#custom#var('omni', 'input_patterns', {
  \ 'javascript': '[^. *\t]\.\w*',
  \ })
call deoplete#custom#var('omni', 'functions', {
  \ 'javascript': ['javascriptcomplete#CompleteJS']
  \ })

call deoplete#custom#option({
    \ 'auto_complete_delay': 50,
    \ 'smart_case': v:true,
    \ 'refresh_always': v:true,
    \ 'min_pattern_length': 1,
    \ })

if dein#is_sourced('neosnippet.vim')
  inoremap <expr><C-n> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<C-p>\<Down>"
else
  inoremap <expr><C-n> pumvisible() ? "\<C-n>" : "\<C-p>\<Down>"
endif
inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"

inoremap <expr><CR> deoplete#smart_close_popup()."\<CR>"

inoremap <silent> <BS> <C-r>=<SID>my_bs_function()<CR>
function! s:my_bs_function() abort
  return deoplete#close_popup() . "\<BS>"
endfunction

inoremap <expr><HOME>  deoplete#close_popup() . "\<HOME>"
inoremap <expr><END>   deoplete#close_popup() . "\<END>"
inoremap <expr><Left>  deoplete#close_popup() . "\<Left>"
inoremap <expr><Right> deoplete#close_popup() . "\<Right>"
inoremap <expr><Up>    deoplete#close_popup() . "\<Up>"
inoremap <expr><Down>  deoplete#close_popup() . "\<Down>"

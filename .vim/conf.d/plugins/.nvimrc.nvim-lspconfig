lua << END
  local lspconfig = require 'lspconfig'
  local util = require 'lspconfig/util'
  local capabilities = require('cmp_nvim_lsp').default_capabilities()

  local on_attach = function(client, bufnr)
    local bufopts = { noremap=true, silent=true, buffer=bufnr }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
    vim.keymap.set('n', '<C-]>', vim.lsp.buf.definition, bufopts)
    -- vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  end

  lspconfig.gopls.setup {
    cmd = { 'gopls', 'serve' },
    filetypes = { 'go', 'gomod' },
    root_dir = util.root_pattern('go.work', 'go.mod', '.git'),
    settings = {
      gopls = {
        analyses = {
          unusedparams = true,
        },
        staticcheck = true,
      },
    },
    capabilities = capabilities,
    on_attach = on_attach,
  }
  lspconfig.jsonls.setup {
    capabilities = capabilities,
    on_attach = on_attach,
  }
  lspconfig.rust_analyzer.setup {
    capabilities = capabilities,
    on_attach = on_attach,
  }
  lspconfig.sqls.setup {
    settings = {
      sqls = {
        connections = {
          -- {
          --   driver = 'mysql',
          --   dataSourceName = 'root:root@tcp(127.0.0.1:13306)/world',
          -- },
        },
      },
    },
    capabilities = capabilities,
    on_attach = on_attach,
  }
  lspconfig.solargraph.setup {
    init_options = { diagnostics = true },
    capabilities = capabilities,
    on_attach = on_attach,
  }
  lspconfig.terraformls.setup {
    capabilities = capabilities,
    on_attach = on_attach,
  }
  -- lspconfig.tsserver.setup {
  --   capabilities = capabilities,
  --   on_attach = on_attach,
  -- }
  lspconfig.yamlls.setup {
    capabilities = capabilities,
    on_attach = on_attach,
    settings = {
      yaml = {
        customTags = {
          '!fn',
          '!And',
          "!And sequence",
          '!If',
          "!If sequence",
          '!Not',
          "!Not sequence",
          '!Equals',
          "!Equals sequence",
          '!Or',
          "!Or sequence",
          "!FindInMap",
          '!FindInMap sequence',
          '!Base64',
          '!Cidr',
          '!Ref',
          '!Ref Scalar',
          '!Sub',
          "!Sub sequence",
          '!GetAtt',
          '!GetAZs',
          '!ImportValue',
          "!ImportValue sequence",
          '!Select',
          "!Select sequence",
          '!Split',
          "!Split sequence",
          "!Join",
          '!Join sequence',
        },
      },
    },
  }
END
